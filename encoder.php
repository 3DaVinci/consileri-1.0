<?php
/*
header ("Content-type: text/plain");
error_reporting (E_ALL);
$content = "
include 'conf/config.php';
global \$conf;
eval(base64_decode(''));

echo '2nd\n';

eval(base64_decode(''));

echo '3rd\n';

eval(base64_decode(''));
";

echo "file: ".$content;
$content = encoder ($content);
echo "\n\n\nAfter Encoder: \n\n".$content;
eval ($content);
*/
function encoder ($content) {
    $code = 'global $conf;$key = $conf["license"];@eval(base64_decode(""));';
    //$code = 'global $conf;$key = $conf["license"];@eval(base64_decode(""));

    $i = 0;
    while (($encoder_start = strpos ($content, "//<encoder_start>")) !== false) {
        $encoder_end = strpos ($content, "//<encoder_end>");
        $content_start = substr ($content, 0, $encoder_start);
        $content_to_encode = substr ($content, $encoder_start + strlen ("//<encoder_start>"), $encoder_end - $encoder_start - strlen ("//<encoder_start>"));
        $content_end = substr ($content, $encoder_end + strlen ("//<encoder_end>"));
        
        $content_to_encode = "eval(base64_decode('".base64_encode ($code.$content_to_encode)."'));";
        //$content_to_encode = $code;//.$content_to_encode;
        
        $content = $content_start . $content_to_encode . $content_end;
        //echo  "\n\n\n\ni : $i \n\n\n\n".($content);
        $i ++;
    }
    return $content;
}

if (! empty ($_GET ['file'])) {
    $file = realpath ($_GET ['file']);
    if (file_exists ($file)) { 
        $cur_dir = dirname (__FILE__);
        if (substr ($file, 0, strlen ($cur_dir)) == $cur_dir) {
            echo encoder (file_get_contents ($file));
        }
    }
}
